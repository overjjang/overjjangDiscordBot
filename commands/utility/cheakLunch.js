const { SlashCommandBuilder, EmbedBuilder, StringSelectMenuBuilder, StringSelectMenuOptionBuilder, ActionRowBuilder, ComponentType } = require('discord.js');

const urlBase = "https://gubsicapi.overjjang.xyz/api";

const data = new SlashCommandBuilder()
    .setName('Ïò§ÎäòÍ∏âÏãù')
    .setNameLocalizations({
        ko: 'Ïò§ÎäòÍ∏âÏãù',
        'en-US': 'today_lunch'
    })
    .setDescription('Ïò§ÎäòÏùò Í∏âÏãù Î©îÎâ¥Î•º ÌôïÏù∏Ìï©ÎãàÎã§')
    .setDescriptionLocalizations({
        ko: 'Ïò§ÎäòÏùò Í∏âÏãù Î©îÎâ¥Î•º ÌôïÏù∏Ìï©ÎãàÎã§',
        'en-US': 'Check today\'s lunch menu'
    })
    .addStringOption(option =>
        option.setName('ÌïôÍµêÏù¥Î¶Ñ')
            .setNameLocalizations({
                ko: 'ÌïôÍµêÏù¥Î¶Ñ',
                'en-US': 'school_name'
            })
            .setDescription('ÌïôÍµê Ïù¥Î¶ÑÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî')
            .setDescriptionLocalizations({
                ko: 'ÌïôÍµê Ïù¥Î¶ÑÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî',
                'en-US': 'Enter the name of the school'
            })
            .setAutocomplete(true)
            .setRequired(true))
    .addStringOption(option =>
        option.setName('ÎÇ†Ïßú')
            .setNameLocalizations({
                ko: 'ÎÇ†Ïßú',
                'en-US': 'date'
            })
            .setDescription('ÎÇ†ÏßúÎ•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî(YYYY-MM-DD)')
            .setDescriptionLocalizations({
                ko: 'ÎÇ†ÏßúÎ•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî(YYYY-MM-DD)',
                'en-US': 'Enter the date(YYYY-MM-DD)'
            })
            .setRequired(false));

module.exports = {
    category: 'utility',
    data: data,
    async execute(interaction) {
        const schoolName = interaction.options.getString('ÌïôÍµêÏù¥Î¶Ñ');
        await fetch(urlBase + `?mode=name&schoolName=${schoolName}`)
            .then(res => res.json())
            .then(async json => {
                const date = interaction.options.getString('ÎÇ†Ïßú') ? new Date(interaction.options.getString('ÎÇ†Ïßú')).toISOString().slice(0, 10) : new Date(new Date().getTime() + 9 * 60 * 60 * 1000).toISOString().slice(0, 10);
                if (json.schoolInfo[0].head[0].list_total_count) {
                    if (json.schoolInfo[0].head[0].list_total_count === 1) {
                        const atptCode = json.schoolInfo[1].row[0].ATPT_OFCDC_SC_CODE;
                        const schoolCode = json.schoolInfo[1].row[0].SD_SCHUL_CODE;
                        console.log(urlBase + `?mode=menu&atptCode=${atptCode}&schoolCode=${schoolCode}&date=${date.replace(/-/g, '')}`);
                        await fetch(urlBase + `?mode=menu&atptCode=${atptCode}&schoolCode=${schoolCode}&date=${date.replace(/-/g, '')}`)
                            .then(res => res.json())
                            .then(async json => {
                                if (!json.RESULT) {
                                    const menuEmbed = new EmbedBuilder()
                                        .setColor('#0099ff')
                                        .setTitle(`${json.mealServiceDietInfo[1].row[0].SCHUL_NM}Ïùò Í∏âÏãù Ï†ïÎ≥¥`)
                                        .setDescription(`Í∏âÏãù Ï†ïÎ≥¥Îäî ${date}Ïùº Í∏∞Ï§ÄÏûÖÎãàÎã§`)
                                        .setFields(
                                            json.mealServiceDietInfo[1].row.map(item => ({
                                                name: item.MMEAL_SC_NM,
                                                value: item.DDISH_NM.replace(/<br\/>/g, '\n') + "\n",
                                                inline: true
                                            }))
                                        )
                                        .setFooter({text: 'Í∏âÏãù Ï†ïÎ≥¥ Ï†úÍ≥µ: ÍµêÏú°Ï≤≠ NEIS API'});
                                    await interaction.reply({embeds: [menuEmbed]});
                                } else {
                                    await interaction.reply("Í∏âÏãù Ï†ïÎ≥¥Í∞Ä ÏóÜÏäµÎãàÎã§");
                                }
                            })
                            .catch(async err => {
                                console.error(err);
                                await interaction.reply("ÏÑúÎ≤ÑÏôÄÏùò ÌÜµÏã† Ï§ë Ïò§Î•ò Î∞úÏÉù");
                            })
                    } else {
                        const schoolEmbed = new EmbedBuilder()
                            .setColor('#0099ff')
                            .setTitle(`"${interaction.options.getString('ÌïôÍµêÏù¥Î¶Ñ')}"Îã®Ïñ¥Í∞Ä Îì§Ïñ¥Í∞Ñ ÌïôÍµêÍ∞Ä Ïó¨Îü¨Í∞úÏûÖÎãàÎã§`)
                            .setDescription('Îã§Ïùå Ï§ë ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî')
                            .setFields(
                                json.schoolInfo[1].row.map(item => ({
                                    name: item.SCHUL_NM,
                                    value: item.ORG_RDNMA.replace(/<br\/>/g, '\n') + "\n",
                                    inline: true
                                }))
                            )
                            .setFooter({ text: 'ÌïôÍµê Ï†ïÎ≥¥ Ï†úÍ≥µ: ÍµêÏú°Ï≤≠ NEIS API' });
                        const schoolSelect = new StringSelectMenuBuilder()
                            .setCustomId('schoolSelect')
                            .setPlaceholder('ÌïôÍµê ÏÑ†ÌÉù')
                            .addOptions(
                                json.schoolInfo[1].row.map(item => new StringSelectMenuOptionBuilder()
                                    .setLabel(item.SCHUL_NM)
                                    .setValue(item.SCHUL_NM)
                                    .setDescription(item.ORG_RDNMA)
                                    .setEmoji('üè´'))
                            )
                        const row = new ActionRowBuilder()
                            .addComponents(schoolSelect);
                        const response = await interaction.reply({ embeds: [schoolEmbed] , components: [row] });

                        const collector = response.createMessageComponentCollector({ componentType: ComponentType.StringSelect, time: 3_600_000 });

                        collector.on('collect', async i => {
                            const selectedSchool = json.schoolInfo[1].row.find(item => item.SCHUL_NM === i.values[0]);
                            const atptCode = selectedSchool.ATPT_OFCDC_SC_CODE;
                            const schoolCode = selectedSchool.SD_SCHUL_CODE;
                            await fetch(urlBase + `?mode=menu&atptCode=${atptCode}&schoolCode=${schoolCode}&date=${date.replace(/-/g, '')}`)
                                .then(res => res.json())
                                .then(async json => {
                                    if (json.mealServiceDietInfo[0].head[0].list_total_count > 0) {
                                        const menuEmbed = new EmbedBuilder()
                                            .setColor('#0099ff')
                                            .setTitle(`${json.mealServiceDietInfo[1].row[0].SCHUL_NM}Ïùò Í∏âÏãù Ï†ïÎ≥¥`)
                                            .setDescription(`Í∏âÏãù Ï†ïÎ≥¥Îäî ${date}Ïùº Í∏∞Ï§ÄÏûÖÎãàÎã§`)
                                            .setFields(
                                                json.mealServiceDietInfo[1].row.map(item => ({
                                                    name: item.MMEAL_SC_NM,
                                                    value: item.DDISH_NM.replace(/<br\/>/g, '\n') + "\n",
                                                    inline: true
                                                }))
                                            )
                                            .setFooter({text: 'Í∏âÏãù Ï†ïÎ≥¥ Ï†úÍ≥µ: ÍµêÏú°Ï≤≠ NEIS API'});
                                        await interaction.editReply({embeds: [menuEmbed], components: []});
                                    } else {
                                        await i.reply("Í∏âÏãù Ï†ïÎ≥¥Í∞Ä ÏóÜÏäµÎãàÎã§");
                                    }
                                })
                                .catch(async err => {
                                    console.error(err);
                                    await i.reply("ÏÑúÎ≤ÑÏôÄÏùò ÌÜµÏã† Ï§ë Ïò§Î•ò Î∞úÏÉù");
                                })
                        })
                    }
                } else if (!json.schoolInfo[0].head[0].list_total_count) {
                    interaction.reply("Í≤ÄÏÉâÎêú ÌïôÍµêÍ∞Ä ÏóÜÏäµÎãàÎã§. ÌïôÍµê Ïù¥Î¶ÑÏùÑ Îã§Ïãú ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî");
                } else {
                    interaction.reply("Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§. Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî");
                }
            })
            .catch(err => {
                console.error(err);
                interaction.reply("ÏÑúÎ≤ÑÏôÄÏùò ÌÜµÏã† Ï§ë Ïò§Î•ò Î∞úÏÉù");
            });
    }
}